'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hooks = require('@chakra-ui/hooks');
var reactEnv = require('@chakra-ui/react-env');
var utils = require('@chakra-ui/utils');
var React = require('react');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var classNames = {
  light: "chakra-ui-light",
  dark: "chakra-ui-dark"
};
var queries = {
  light: "(prefers-color-scheme: light)",
  dark: "(prefers-color-scheme: dark)"
};
function getColorModeUtils(options) {
  var _doc$defaultView;

  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$doc = _options.doc,
      doc = _options$doc === void 0 ? document : _options$doc,
      _options$preventTrans = _options.preventTransition,
      preventTransition = _options$preventTrans === void 0 ? true : _options$preventTrans;
  var body = doc.body;
  var win = (_doc$defaultView = doc.defaultView) != null ? _doc$defaultView : window;
  var docEl = doc.documentElement;
  var utils = {
    setDataset: function setDataset(value) {
      var cleanup = preventTransition ? utils.preventTransition() : undefined;
      docEl.dataset.theme = value;
      docEl.style.colorScheme = value;
      cleanup == null ? void 0 : cleanup();
    },
    setClassName: function setClassName(dark) {
      body.classList.add(dark ? classNames.dark : classNames.light);
      body.classList.remove(dark ? classNames.light : classNames.dark);
    },
    query: function query(_query) {
      return win.matchMedia(_query);
    },
    getColorScheme: function getColorScheme(fallback) {
      var _utils$query$matches;

      var dark = (_utils$query$matches = utils.query(queries.dark).matches) != null ? _utils$query$matches : fallback === "dark";
      return dark ? "dark" : "light";
    },
    addListener: function addListener(fn) {
      var mql = utils.query(queries.dark);

      var listener = function listener(e) {
        fn(e.matches ? "dark" : "light");
      };

      mql.addEventListener("change", listener);
      return function () {
        return mql.removeEventListener("change", listener);
      };
    },
    preventTransition: function preventTransition() {
      var css = doc.createElement("style");
      css.appendChild(doc.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}"));
      doc.head.appendChild(css);
      return function () {

        (function () {
          return win.getComputedStyle(doc.body);
        })();

        win.setTimeout(function () {
          doc.head.removeChild(css);
        }, 1);
      };
    }
  };
  return utils;
}

var STORAGE_KEY = "chakra-ui-color-mode";
function createLocalStorageManager(key) {
  return {
    get: function get(init) {
      if (!utils.isBrowser) return init;

      try {
        var _value = localStorage.getItem(key);

        return _value != null ? _value : init;
      } catch (error) {
        if (utils.__DEV__) console.log(error);
        return init;
      }
    },
    set: function set(value) {
      if (!utils.isBrowser) return;

      try {
        localStorage.setItem(key, value);
      } catch (error) {
        if (utils.__DEV__) {
          console.log(error);
        }
      }
    },
    type: "localStorage"
  };
}
var localStorageManager = createLocalStorageManager(STORAGE_KEY);
function createCookieStorageManager(key) {
  return {
    type: "cookie",
    get: function get(init) {
      var _match$;

      if (!utils.isBrowser) return init;
      var match = document.cookie.match(new RegExp("(^| )" + key + "=([^;]+)"));
      var value = (_match$ = match == null ? void 0 : match[2]) != null ? _match$ : init;
      return value;
    },
    set: function set(value) {
      if (!utils.isBrowser) return;
      document.cookie = key + "=" + value + "; max-age=31536000; path=/";
    }
  };
}
var cookieStorageManager = createCookieStorageManager(STORAGE_KEY);

var ColorModeContext = /*#__PURE__*/React__namespace.createContext({});

if (utils.__DEV__) {
  ColorModeContext.displayName = "ColorModeContext";
}
/**
 * React hook that reads from `ColorModeProvider` context
 * Returns the color mode and function to toggle it
 */


var useColorMode = function useColorMode() {
  var context = React__namespace.useContext(ColorModeContext);

  if (context === undefined) {
    throw new Error("useColorMode must be used within a ColorModeProvider");
  }

  return context;
};

/**
 * Provides context for the color mode based on config in `theme`
 * Returns the color mode and function to toggle the color mode
 */
function ColorModeProvider(props) {
  var value = props.value,
      children = props.children,
      _props$options = props.options;
  _props$options = _props$options === void 0 ? {} : _props$options;
  var useSystemColorMode = _props$options.useSystemColorMode,
      initialColorMode = _props$options.initialColorMode,
      _props$colorModeManag = props.colorModeManager,
      colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;
  var defaultColorMode = initialColorMode === "dark" ? "dark" : "light";

  var _React$useState = React__namespace.useState(defaultColorMode),
      colorMode = _React$useState[0],
      rawSetColorMode = _React$useState[1];

  var _useEnvironment = reactEnv.useEnvironment(),
      document = _useEnvironment.document;

  React__namespace.useEffect(function () {
    if (!utils.isBrowser) return;
    var utils$1 = getColorModeUtils({
      doc: document
    });
    var managerValue = colorModeManager.get();

    if (managerValue) {
      rawSetColorMode(managerValue);
      return;
    }

    var systemValue = utils$1.getColorScheme(defaultColorMode);

    if (initialColorMode === "system") {
      rawSetColorMode(systemValue);
      return;
    }

    rawSetColorMode(defaultColorMode);
  }, [colorModeManager, defaultColorMode, initialColorMode, document]);
  hooks.useUpdateEffect(function () {
    var utils = getColorModeUtils({
      doc: document
    });
    var dark = colorMode === "dark";
    utils.setClassName(dark);

    if (colorMode) {
      utils.setDataset(colorMode);
      colorModeManager.set(colorMode);
    }
  }, [colorMode, document]);
  var toggleColorMode = React__namespace.useCallback(function () {
    rawSetColorMode(function (prev) {
      return prev === "light" ? "dark" : "light";
    });
  }, []);
  React__namespace.useEffect(function () {
    if (!utils.isBrowser) return;
    var utils$1 = getColorModeUtils({
      doc: document
    });
    var system = useSystemColorMode || initialColorMode === "system";
    return system ? utils$1.addListener(rawSetColorMode) : utils.noop;
  }, [useSystemColorMode, initialColorMode, document]); // presence of `value` indicates a controlled context

  var context = React__namespace.useMemo(function () {
    return {
      colorMode: value != null ? value : colorMode,
      toggleColorMode: value ? utils.noop : toggleColorMode,
      setColorMode: value ? utils.noop : rawSetColorMode
    };
  }, [colorMode, toggleColorMode, value]);
  return /*#__PURE__*/React__namespace.createElement(ColorModeContext.Provider, {
    value: context
  }, children);
}

if (utils.__DEV__) {
  ColorModeProvider.displayName = "ColorModeProvider";
}
/**
 * Locks the color mode to `dark`, without any way to change it.
 */


var DarkMode = function DarkMode(props) {
  var context = React__namespace.useMemo(function () {
    return {
      colorMode: "dark",
      toggleColorMode: utils.noop,
      setColorMode: utils.noop
    };
  }, []);
  return /*#__PURE__*/React__namespace.createElement(ColorModeContext.Provider, _extends({
    value: context
  }, props));
};

if (utils.__DEV__) {
  DarkMode.displayName = "DarkMode";
}
/**
 * Locks the color mode to `light` without any way to change it.
 */


var LightMode = function LightMode(props) {
  var context = React__namespace.useMemo(function () {
    return {
      colorMode: "light",
      toggleColorMode: utils.noop,
      setColorMode: utils.noop
    };
  }, []);
  return /*#__PURE__*/React__namespace.createElement(ColorModeContext.Provider, _extends({
    value: context
  }, props));
};

if (utils.__DEV__) {
  LightMode.displayName = "LightMode";
}
/**
 * Change value based on color mode.
 *
 * @param light the light mode value
 * @param dark the dark mode value
 *
 * @example
 *
 * ```js
 * const Icon = useColorModeValue(MoonIcon, SunIcon)
 * ```
 */


function useColorModeValue(light, dark) {
  var _useColorMode = useColorMode(),
      colorMode = _useColorMode.colorMode;

  return colorMode === "dark" ? dark : light;
}

function getScriptSrc(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      _props$initialColorMo = _props.initialColorMode,
      initialColorMode = _props$initialColorMo === void 0 ? "system" : _props$initialColorMo,
      _props$type = _props.type,
      type = _props$type === void 0 ? "localStorage" : _props$type,
      _props$storageKey = _props.storageKey,
      storageKey = _props$storageKey === void 0 ? "chakra-ui-color-mode" : _props$storageKey;
  var isCookie = type === "cookie";
  var init = isCookie ? initialColorMode : "'" + initialColorMode + "'";
  var k = isCookie ? storageKey : "'" + storageKey + "'";
  var cookieScript = "!function(){try{var t=\"(prefers-color-scheme: dark)\", e=window.matchMedia(t).matches?\"dark\":\"light\", d=document.documentElement;var ck=document.cookie.match(new RegExp(`(^| )" + k + "=([^;]+)`));var m=ck && ck[2]; if(!m) return document.cookie=`" + k + "=" + init + "; max-age=31536000; path=/`,d.dataset.theme=\"system\"==='" + init + "'?e:'" + init + "';var yy=\"system\"===m?e:m; d.dataset.theme=yy;d.style.colorScheme=yy}catch(t){}}()";
  var localStorageScript = "!function(){try{var t=\"(prefers-color-scheme: dark)\",e=window.matchMedia(t).matches?\"dark\":\"light\",d=document.documentElement,m=localStorage.getItem(" + k + ");if(!m)return localStorage.setItem(" + k + "," + init + "),d.dataset.theme=\"system\"===" + init + "?e:" + init + ";var yy=\"system\"===m?e:m; d.dataset.theme=yy;d.style.colorScheme=yy}catch(t){}}()";
  return isCookie ? cookieScript : localStorageScript;
}
function ColorModeScript(props) {
  if (props === void 0) {
    props = {};
  }

  return /*#__PURE__*/React__namespace.createElement("script", {
    id: "chakra-script",
    dangerouslySetInnerHTML: {
      __html: getScriptSrc(props)
    }
  });
}

exports.ColorModeContext = ColorModeContext;
exports.ColorModeProvider = ColorModeProvider;
exports.ColorModeScript = ColorModeScript;
exports.DarkMode = DarkMode;
exports.LightMode = LightMode;
exports.STORAGE_KEY = STORAGE_KEY;
exports.cookieStorageManager = cookieStorageManager;
exports.createCookieStorageManager = createCookieStorageManager;
exports.createLocalStorageManager = createLocalStorageManager;
exports.getScriptSrc = getScriptSrc;
exports.localStorageManager = localStorageManager;
exports.useColorMode = useColorMode;
exports.useColorModeValue = useColorModeValue;
